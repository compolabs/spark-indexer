/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.35.0
  Forc version: 0.35.3
  Fuel-Core version: 0.17.3
*/

import { Interface, Contract } from "fuels";
import type { Provider, Account, AbstractAddress } from "fuels";
import type { LimitOrdersAbi, LimitOrdersAbiInterface } from "./LimitOrdersAbi";

const _abi = {
  types: [
    {
      typeId: 0,
      type: "()",
      components: [],
      typeParameters: null,
    },
    {
      typeId: 1,
      type: "(_, _, _, _, _, _, _, _, _, _)",
      components: [
        {
          name: "__tuple_element",
          type: 5,
          typeArguments: [
            {
              name: "",
              type: 17,
              typeArguments: null,
            },
          ],
        },
        {
          name: "__tuple_element",
          type: 5,
          typeArguments: [
            {
              name: "",
              type: 17,
              typeArguments: null,
            },
          ],
        },
        {
          name: "__tuple_element",
          type: 5,
          typeArguments: [
            {
              name: "",
              type: 17,
              typeArguments: null,
            },
          ],
        },
        {
          name: "__tuple_element",
          type: 5,
          typeArguments: [
            {
              name: "",
              type: 17,
              typeArguments: null,
            },
          ],
        },
        {
          name: "__tuple_element",
          type: 5,
          typeArguments: [
            {
              name: "",
              type: 17,
              typeArguments: null,
            },
          ],
        },
        {
          name: "__tuple_element",
          type: 5,
          typeArguments: [
            {
              name: "",
              type: 17,
              typeArguments: null,
            },
          ],
        },
        {
          name: "__tuple_element",
          type: 5,
          typeArguments: [
            {
              name: "",
              type: 17,
              typeArguments: null,
            },
          ],
        },
        {
          name: "__tuple_element",
          type: 5,
          typeArguments: [
            {
              name: "",
              type: 17,
              typeArguments: null,
            },
          ],
        },
        {
          name: "__tuple_element",
          type: 5,
          typeArguments: [
            {
              name: "",
              type: 17,
              typeArguments: null,
            },
          ],
        },
        {
          name: "__tuple_element",
          type: 5,
          typeArguments: [
            {
              name: "",
              type: 17,
              typeArguments: null,
            },
          ],
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 2,
      type: "(_, _, _, _, _, _, _, _, _, _)",
      components: [
        {
          name: "__tuple_element",
          type: 5,
          typeArguments: [
            {
              name: "",
              type: 18,
              typeArguments: null,
            },
          ],
        },
        {
          name: "__tuple_element",
          type: 5,
          typeArguments: [
            {
              name: "",
              type: 18,
              typeArguments: null,
            },
          ],
        },
        {
          name: "__tuple_element",
          type: 5,
          typeArguments: [
            {
              name: "",
              type: 18,
              typeArguments: null,
            },
          ],
        },
        {
          name: "__tuple_element",
          type: 5,
          typeArguments: [
            {
              name: "",
              type: 18,
              typeArguments: null,
            },
          ],
        },
        {
          name: "__tuple_element",
          type: 5,
          typeArguments: [
            {
              name: "",
              type: 18,
              typeArguments: null,
            },
          ],
        },
        {
          name: "__tuple_element",
          type: 5,
          typeArguments: [
            {
              name: "",
              type: 18,
              typeArguments: null,
            },
          ],
        },
        {
          name: "__tuple_element",
          type: 5,
          typeArguments: [
            {
              name: "",
              type: 18,
              typeArguments: null,
            },
          ],
        },
        {
          name: "__tuple_element",
          type: 5,
          typeArguments: [
            {
              name: "",
              type: 18,
              typeArguments: null,
            },
          ],
        },
        {
          name: "__tuple_element",
          type: 5,
          typeArguments: [
            {
              name: "",
              type: 18,
              typeArguments: null,
            },
          ],
        },
        {
          name: "__tuple_element",
          type: 5,
          typeArguments: [
            {
              name: "",
              type: 18,
              typeArguments: null,
            },
          ],
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 3,
      type: "[_; 10]",
      components: [
        {
          name: "__array_element",
          type: 19,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 4,
      type: "b256",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 5,
      type: "enum Option",
      components: [
        {
          name: "None",
          type: 0,
          typeArguments: null,
        },
        {
          name: "Some",
          type: 7,
          typeArguments: null,
        },
      ],
      typeParameters: [7],
    },
    {
      typeId: 6,
      type: "enum Status",
      components: [
        {
          name: "Active",
          type: 0,
          typeArguments: null,
        },
        {
          name: "Canceled",
          type: 0,
          typeArguments: null,
        },
        {
          name: "Completed",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 7,
      type: "generic T",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 8,
      type: "str[13]",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 9,
      type: "str[15]",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 10,
      type: "str[18]",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 11,
      type: "str[20]",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 12,
      type: "str[22]",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 13,
      type: "str[23]",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 14,
      type: "str[28]",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 15,
      type: "struct Address",
      components: [
        {
          name: "value",
          type: 4,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 16,
      type: "struct ContractId",
      components: [
        {
          name: "value",
          type: 4,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 17,
      type: "struct Order",
      components: [
        {
          name: "asset0",
          type: 16,
          typeArguments: null,
        },
        {
          name: "amount0",
          type: 19,
          typeArguments: null,
        },
        {
          name: "asset1",
          type: 16,
          typeArguments: null,
        },
        {
          name: "amount1",
          type: 19,
          typeArguments: null,
        },
        {
          name: "status",
          type: 6,
          typeArguments: null,
        },
        {
          name: "fulfilled0",
          type: 19,
          typeArguments: null,
        },
        {
          name: "fulfilled1",
          type: 19,
          typeArguments: null,
        },
        {
          name: "owner",
          type: 15,
          typeArguments: null,
        },
        {
          name: "id",
          type: 19,
          typeArguments: null,
        },
        {
          name: "timestamp",
          type: 19,
          typeArguments: null,
        },
        {
          name: "matcher_fee",
          type: 19,
          typeArguments: null,
        },
        {
          name: "matcher_fee_used",
          type: 19,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 18,
      type: "struct Trade",
      components: [
        {
          name: "order_id",
          type: 19,
          typeArguments: null,
        },
        {
          name: "asset0",
          type: 16,
          typeArguments: null,
        },
        {
          name: "amount0",
          type: 19,
          typeArguments: null,
        },
        {
          name: "asset1",
          type: 16,
          typeArguments: null,
        },
        {
          name: "amount1",
          type: 19,
          typeArguments: null,
        },
        {
          name: "timestamp",
          type: 19,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 19,
      type: "u64",
      components: null,
      typeParameters: null,
    },
  ],
  functions: [
    {
      inputs: [
        {
          name: "id",
          type: 19,
          typeArguments: null,
        },
      ],
      name: "cancel_order",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "asset1",
          type: 16,
          typeArguments: null,
        },
        {
          name: "amount1",
          type: 19,
          typeArguments: null,
        },
        {
          name: "matcher_fee",
          type: 19,
          typeArguments: null,
        },
      ],
      name: "create_order",
      output: {
        name: "",
        type: 19,
        typeArguments: null,
      },
      attributes: [
        {
          name: "payable",
          arguments: [],
        },
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [],
      name: "deposit",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
        {
          name: "payable",
          arguments: [],
        },
      ],
    },
    {
      inputs: [
        {
          name: "id",
          type: 19,
          typeArguments: null,
        },
      ],
      name: "fulfill_order",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "payable",
          arguments: [],
        },
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "address",
          type: 15,
          typeArguments: null,
        },
      ],
      name: "get_deposit_by_address",
      output: {
        name: "",
        type: 19,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "order0_id",
          type: 19,
          typeArguments: null,
        },
        {
          name: "order1_id",
          type: 19,
          typeArguments: null,
        },
      ],
      name: "match_orders",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "id",
          type: 19,
          typeArguments: null,
        },
      ],
      name: "order_by_id",
      output: {
        name: "",
        type: 17,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "offset",
          type: 19,
          typeArguments: null,
        },
      ],
      name: "orders",
      output: {
        name: "",
        type: 1,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "orders_amount",
      output: {
        name: "",
        type: 19,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "ids",
          type: 3,
          typeArguments: null,
        },
      ],
      name: "orders_by_id",
      output: {
        name: "",
        type: 1,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "offset",
          type: 19,
          typeArguments: null,
        },
      ],
      name: "trades",
      output: {
        name: "",
        type: 2,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "amount",
          type: 19,
          typeArguments: null,
        },
      ],
      name: "withdraw",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
  ],
  loggedTypes: [
    {
      logId: 0,
      loggedType: {
        name: "",
        type: 10,
        typeArguments: null,
      },
    },
    {
      logId: 1,
      loggedType: {
        name: "",
        type: 10,
        typeArguments: null,
      },
    },
    {
      logId: 2,
      loggedType: {
        name: "",
        type: 8,
        typeArguments: null,
      },
    },
    {
      logId: 3,
      loggedType: {
        name: "",
        type: 12,
        typeArguments: null,
      },
    },
    {
      logId: 4,
      loggedType: {
        name: "",
        type: 14,
        typeArguments: null,
      },
    },
    {
      logId: 5,
      loggedType: {
        name: "",
        type: 10,
        typeArguments: null,
      },
    },
    {
      logId: 6,
      loggedType: {
        name: "",
        type: 9,
        typeArguments: null,
      },
    },
    {
      logId: 7,
      loggedType: {
        name: "",
        type: 10,
        typeArguments: null,
      },
    },
    {
      logId: 8,
      loggedType: {
        name: "",
        type: 12,
        typeArguments: null,
      },
    },
    {
      logId: 9,
      loggedType: {
        name: "",
        type: 9,
        typeArguments: null,
      },
    },
    {
      logId: 10,
      loggedType: {
        name: "",
        type: 11,
        typeArguments: null,
      },
    },
    {
      logId: 11,
      loggedType: {
        name: "",
        type: 11,
        typeArguments: null,
      },
    },
    {
      logId: 12,
      loggedType: {
        name: "",
        type: 13,
        typeArguments: null,
      },
    },
    {
      logId: 13,
      loggedType: {
        name: "",
        type: 14,
        typeArguments: null,
      },
    },
    {
      logId: 14,
      loggedType: {
        name: "",
        type: 14,
        typeArguments: null,
      },
    },
    {
      logId: 15,
      loggedType: {
        name: "",
        type: 10,
        typeArguments: null,
      },
    },
    {
      logId: 16,
      loggedType: {
        name: "",
        type: 10,
        typeArguments: null,
      },
    },
  ],
  messagesTypes: [],
  configurables: [],
};

export class LimitOrdersAbi__factory {
  static readonly abi = _abi;
  static createInterface(): LimitOrdersAbiInterface {
    return (new Interface(_abi) as unknown) as LimitOrdersAbiInterface;
  }
  static connect(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider
  ): LimitOrdersAbi {
    return (new Contract(id, _abi, accountOrProvider) as unknown) as LimitOrdersAbi;
  }
}
